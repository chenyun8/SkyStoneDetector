package com.example.skystonedetector;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.*;
import org.opencv.imgproc.*;


/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class SkyStoneImageProcessor {

    //Outputs
    private Mat blurOutput = new Mat();
    private Mat rgbThresholdOutput = new Mat();
    private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();

    private int bignessThresh = 1500000;

    private MainActivity main;
/*
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

 */

    public SkyStoneImageProcessor(MainActivity mainActivity)
    {
        main = mainActivity;
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    public int process(Mat source0) {
        // Step Blur0:
        Mat blurInput = source0;
        BlurType blurType = BlurType.get("Box Blur");
        double blurRadius = 52;
        blur(blurInput, blurType, blurRadius, blurOutput);

        main.setImage(blurOutput);

        // Step RGB_Threshold0:
        Mat rgbThresholdInput = blurOutput;
        double[] rgbThresholdRed = {195, 255.0};/*149.05575539568343*/
        double[] rgbThresholdGreen = {0, 255.0};/*146.76258992805754*/
        double[] rgbThresholdBlue = {0.0, 100};/*104.74747474747474*/
        rgbThreshold(rgbThresholdInput, rgbThresholdBlue, rgbThresholdGreen, rgbThresholdRed, rgbThresholdOutput);

        main.setImage(rgbThresholdOutput);

        // Step Find_Contours0:
        Mat findContoursInput = rgbThresholdOutput;
        boolean findContoursExternalOnly = false;
        findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

        double left = 0;
        double right = 0;

        System.out.println("cotours " + findContoursOutput.size());


        if(findContoursOutput.size() == 1){
            return 4;
        }
        for(int i = 0; i < findContoursOutput.size(); i++){
            Rect r = Imgproc.boundingRect(findContoursOutput.get(i));
            double area = r.area();
            if(area < 300){
                continue;
            }
            if(area > bignessThresh){
                return 4;
            }

            Point center = new Point(r.x + (r.width / 2),
                    r.y + (r.height / 2));

            if(center.x <= blurInput.width()/2){
                // it is on the left side
                left += area;

            }else{
                //it is on the right
                right += area;

            }

            System.out.println("area" + i + " " + area);

        }

        System.out.println("left " + left + " right " + right );

        if(left > right + 10000){
            return 6;
        }else if(right > left + 10000){
            return 5;
        }else{
            return 4;
        }


    }

    /**
     * This method is a generated getter for the output of a Blur.
     * @return Mat output from Blur.
     */
    public Mat blurOutput() {
        return blurOutput;
    }

    /**
     * This method is a generated getter for the output of a RGB_Threshold.
     * @return Mat output from RGB_Threshold.
     */
    public Mat rgbThresholdOutput() {
        return rgbThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Contours.
     * @return ArrayList<MatOfPoint> output from Find_Contours.
     */
    public ArrayList<MatOfPoint> findContoursOutput() {
        return findContoursOutput;
    }


    /**
     * An indication of which type of filter to use for a blur.
     * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
     */
    enum BlurType{
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
        BILATERAL("Bilateral Filter");

        private final String label;

        BlurType(String label) {
            this.label = label;
        }

        public static BlurType get(String type) {
            if (BILATERAL.label.equals(type)) {
                return BILATERAL;
            }
            else if (GAUSSIAN.label.equals(type)) {
                return GAUSSIAN;
            }
            else if (MEDIAN.label.equals(type)) {
                return MEDIAN;
            }
            else {
                return BOX;
            }
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    /**
     * Softens an image using one of several filters.
     * @param input The image on which to perform the blur.
     * @param type The blurType to perform.
     * @param doubleRadius The radius for the blur.
     * @param output The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius,
                      Mat output) {
        int radius = (int)(doubleRadius + 0.5);
        int kernelSize;
        switch(type){
            case BOX:
                kernelSize = 2 * radius + 1;
                Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
                break;
            case GAUSSIAN:
                kernelSize = 6 * radius + 1;
                Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
                break;
            case MEDIAN:
                kernelSize = 2 * radius + 1;
                Imgproc.medianBlur(input, output, kernelSize);
                break;
            case BILATERAL:
                Imgproc.bilateralFilter(input, output, -1, radius, radius);
                break;
        }
    }

    /**
     * Segment an image based on color ranges.
     * @param input The image on which to perform the RGB threshold.
     * @param red The min and max red.
     * @param green The min and max green.
     * @param blue The min and max blue.
     * @param out The image in which to store the output.
     */
    private void rgbThreshold(Mat input, double[] red, double[] green, double[] blue,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2RGB);
        Core.inRange(out, new Scalar(red[0], green[0], blue[0]),
                new Scalar(red[1], green[1], blue[1]), out);
    }

    /**
     * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
     */
    private void findContours(Mat input, boolean externalOnly,
                              List<MatOfPoint> contours) {
        Mat hierarchy = new Mat();
        contours.clear();
        int mode;
        if (externalOnly) {
            mode = Imgproc.RETR_EXTERNAL;
        }
        else {
            mode = Imgproc.RETR_LIST;
        }
        int method = Imgproc.CHAIN_APPROX_SIMPLE;
        Imgproc.findContours(input, contours, hierarchy, mode, method);
    }




}

